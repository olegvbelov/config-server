name: Java CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Maven
      run: |
        mvn -B package -DskipTests=true --file pom.xml
    - name: Build the Docker image
      env:
        IMAGE_TAG: ${{ github.sha }}
        run: |
          IMAGE_TAG=$(mvn help:evaluate -Dexpression=project.version --file pom.xml -q -DforceStdout)
          docker build . --file Dockerfile --tag cr.yandex/crp1kafuq6umi5ce3tra/message-sender:$IMAGE_TAG --tag cr.yandex/crp1kafuq6umi5ce3tra/message-sender:latest
          docker login --username=${{ secrets.DOCKER_USERNAME }} --password=${{ secrets.DOCKER_PASSWORD }} cr.yandex
          docker push cr.yandex/crp1kafuq6umi5ce3tra/message-sender:$IMAGE_TAG
          docker push cr.yandex/crp1kafuq6umi5ce3tra/message-sender:latest
          
  deploy:
    runs-on: ubuntu-latest
    needs: [ build ] # Only run this workflow when "build" workflow succeeds
    if: ${{ github.ref == 'refs/heads/master' && github.event_name == 'push' }} # Only run this workflow if it is master branch on push event
    steps:
    - uses: actions/checkout@v2
    - name: Install SSH Key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        known_hosts: 'just-a-placeholder-so-we-dont-get-errors'
    - name: Adding Known Hosts
      run: ssh-keyscan -t rsa ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
    - name: Executing remote  command
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        port: ${{ secrets.SSH_PORT }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        passphrase: ${{ secrets.PASSPHRASE }}
        script: |
          sudo -n docker-compose -f /opt/docker/docker-compose.yml pull config-server
          sudo -n docker-compose -f /opt/docker/docker-compose.yml stop config-server
          sudo -n docker-compose -f /opt/docker/docker-compose.yml up -d config-server
